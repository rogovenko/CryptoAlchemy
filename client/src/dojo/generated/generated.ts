/* Autogenerated file. Do not edit manually. */

import { Account, AccountInterface, BigNumberish } from "starknet";
import { DojoProvider } from "@dojoengine/core";
import { Direction } from "../../utils";

export type IWorld = Awaited<ReturnType<typeof setupWorld>>;

export interface MoveProps {
    account: Account | AccountInterface;
    direction: Direction;
}
export interface AddProps {
    account: Account | AccountInterface;
    count: number;
}
export interface ComboProps {
    account: Account | AccountInterface;
    item_one: number;
    item_two: number;
}
export interface BidProps {
    account: Account | AccountInterface;
    id: number;
}
export interface TimeProps {
    account: Account | AccountInterface;
    timestamp: number;
}

export async function setupWorld(provider: DojoProvider) {
    function actions() {
        const contract_name = "actions";

        const spawn = async ({ account }: { account: AccountInterface }) => {
            try {
                return await provider.execute(
                    account,
                    contract_name,
                    "spawn",
                    []
                );
            } catch (error) {
                console.error("Error executing spawn:", error);
                throw error;
            }
        };

        const move = async ({ account, direction }: MoveProps) => {
            try {
                return await provider.execute(account, contract_name, "move", [
                    direction,
                ]);
            } catch (error) {
                console.error("Error executing move:", error);
                throw error;
            }
        };
        const add_item_rnd = async ({ account, count }: AddProps) => {
            try {
                return await provider.execute(account, contract_name, "add_item_rnd", [
                    count
                ]);
            } catch (error) {
                console.error("Error executing move:", error);
                throw error;
            }
        };
        const combine_items = async ({ account, item_one, item_two }: ComboProps) => {
            try {
                return await provider.execute(account, contract_name, "combine_items", [
                    item_one, item_two
                ]);
            } catch (error) {
                console.error("Error executing move:", error);
                throw error;
            }
        };
        const create_bid = async ({ account, id }: BidProps) => {
            try {
                return await provider.execute(account, contract_name, "create_bid", [
                    id
                ]);
            } catch (error) {
                console.error("Error executing move:", error);
                throw error;
            }
        };
        const setTimestamp = async ({ account, timestamp }: TimeProps) => {
            try {
                return await provider.execute(account, contract_name, "setTimestamp", [
                    timestamp
                ]);
            } catch (error) {
                console.error("Error executing move:", error);
                throw error;
            }
        };
        return { spawn, move, add_item_rnd, combine_items, create_bid, setTimestamp };
    }
    return {
        actions: actions(),
    };
}
